"""
CrewAI Multi-Agent System - –ë–ï–ó LangChain
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –∞–≥–µ–Ω—Ç—ñ–≤
"""

import os
import json
from datetime import datetime
from typing import Dict, List
from crewai import Agent, Task, Crew, Process
from crewai.tools import tool

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
from dotenv import load_dotenv
load_dotenv()

# ===========================
# –Ü–ù–°–¢–†–£–ú–ï–ù–¢–ò –î–õ–Ø –ê–ì–ï–ù–¢–Ü–í
# ===========================

@tool("Web Search Tool")
def search_web(query: str) -> str:
    """–ü–æ—à—É–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ —á–µ—Ä–µ–∑ DuckDuckGo"""
    try:
        from duckduckgo_search import DDGS
        
        results = []
        with DDGS() as ddgs:
            for r in ddgs.text(query, max_results=3):
                results.append(f"‚Ä¢ {r['title']}: {r['body'][:150]}...")
        
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è '{query}':\n" + "\n".join(results)
    except:
        # –î–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —è–∫—â–æ –ø–æ—à—É–∫ –Ω–µ –ø—Ä–∞—Ü—é—î
        return f"""
        –î–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è '{query}':
        ‚Ä¢ AI –≤ –æ—Å–≤—ñ—Ç—ñ: –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–≤—á–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç
        ‚Ä¢ –¢—Ä–µ–Ω–¥–∏ 2025: 85% —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å AI
        ‚Ä¢ –í–∏–∫–ª–∏–∫–∏: –ï—Ç–∏–∫–∞ —Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å –≤ AI —Å–∏—Å—Ç–µ–º–∞—Ö
        """

@tool("Data Analyzer")
def analyze_data(text: str) -> str:
    """–ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É —Ç–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"""
    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    words = len(text.split())
    sentences = text.count('.') + text.count('!') + text.count('?')
    
    # –ü–æ—à—É–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
    keywords = {
        '—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó': ['AI', '—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç', 'machine learning', 'ML'],
        '–æ—Å–≤—ñ—Ç–∞': ['–Ω–∞–≤—á–∞–Ω–Ω—è', '—Å—Ç—É–¥–µ–Ω—Ç–∏', '—É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–æ—Å–≤—ñ—Ç–∞'],
        '—Ç—Ä–µ–Ω–¥–∏': ['—Ç—Ä–µ–Ω–¥', '–º–∞–π–±—É—Ç–Ω—î', '2025', '2024', '—ñ–Ω–Ω–æ–≤–∞—Ü—ñ—è']
    }
    
    found_keywords = {}
    text_lower = text.lower()
    
    for category, words_list in keywords.items():
        count = sum(1 for word in words_list if word.lower() in text_lower)
        if count > 0:
            found_keywords[category] = count
    
    analysis = f"""
    üìä –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É:
    ‚Ä¢ –°–ª—ñ–≤: {words}
    ‚Ä¢ –†–µ—á–µ–Ω—å: {sentences}
    ‚Ä¢ –ö–ª—é—á–æ–≤—ñ —Ç–µ–º–∏: {', '.join(found_keywords.keys()) if found_keywords else '–Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ'}
    """
    
    return analysis

@tool("Report Generator")
def generate_report(data: str, filename: str = None) -> str:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É"""
    if not filename:
        filename = f"crewai_report_{datetime.now():%Y%m%d_%H%M%S}.md"
    
    report_content = f"""
# –ó–≤—ñ—Ç CrewAI
**–î–∞—Ç–∞:** {datetime.now():%Y-%m-%d %H:%M}

## –ó–º—ñ—Å—Ç
{data}

---
*–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ CrewAI Multi-Agent System*
    """
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    return f"‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}"

# ===========================
# –°–¢–í–û–†–ï–ù–ù–Ø –ê–ì–ï–ù–¢–Ü–í
# ===========================

def create_research_team():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –∞–≥–µ–Ω—Ç—ñ–≤ –¥–ª—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è"""
    
    # –ê–≥–µ–Ω—Ç 1: –î–æ—Å–ª—ñ–¥–Ω–∏–∫
    researcher = Agent(
        role='–ì–æ–ª–æ–≤–Ω–∏–π –î–æ—Å–ª—ñ–¥–Ω–∏–∫',
        goal='–ó–Ω–∞–π—Ç–∏ –Ω–∞–π–∞–∫—Ç—É–∞–ª—å–Ω—ñ—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ AI –≤ –æ—Å–≤—ñ—Ç—ñ',
        backstory="""–í–∏ - –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –¥–æ—Å–ª—ñ–¥–Ω–∏–∫ –∑ 15-—Ä—ñ—á–Ω–∏–º —Å—Ç–∞–∂–µ–º.
        –°–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç–µ—Å—å –Ω–∞ –æ—Å–≤—ñ—Ç–Ω—ñ—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è—Ö —Ç–∞ —à—Ç—É—á–Ω–æ–º—É —ñ–Ω—Ç–µ–ª–µ–∫—Ç—ñ.
        –í–∞—à–∞ —Å–∏–ª—å–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ - –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π—Å–≤—ñ–∂—ñ—à–∏—Ö –¥–∞–Ω–∏—Ö —Ç–∞ —Ç—Ä–µ–Ω–¥—ñ–≤.""",
        tools=[search_web],
        verbose=True,
        max_iter=3
    )
    
    # –ê–≥–µ–Ω—Ç 2: –ê–Ω–∞–ª—ñ—Ç–∏–∫
    analyst = Agent(
        role='–°—Ç–∞—Ä—à–∏–π –ê–Ω–∞–ª—ñ—Ç–∏–∫',
        goal='–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑—ñ–±—Ä–∞–Ω—ñ –¥–∞–Ω—ñ —Ç–∞ –≤–∏—è–≤–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —ñ–Ω—Å–∞–π—Ç–∏',
        backstory="""–í–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ data science —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–µ–Ω–¥—ñ–≤.
        –ú–∞—î—Ç–µ —É–Ω—ñ–∫–∞–ª—å–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏ –≤ –¥–∞–Ω–∏—Ö.
        –í–∞—à—ñ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –∑–≤—ñ—Ç–∏ –∑–∞–≤–∂–¥–∏ —Ç–æ—á–Ω—ñ —Ç–∞ –∫–æ—Ä–∏—Å–Ω—ñ.""",
        tools=[analyze_data],
        verbose=True,
        max_iter=3
    )
    
    # –ê–≥–µ–Ω—Ç 3: –†–µ–ø–æ—Ä—Ç–µ—Ä
    reporter = Agent(
        role='–¢–µ—Ö–Ω—ñ—á–Ω–∏–π –ü–∏—Å—å–º–µ–Ω–Ω–∏–∫',
        goal='–°—Ç–≤–æ—Ä–∏—Ç–∏ —á—ñ—Ç–∫–∏–π —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π –∑–≤—ñ—Ç –¥–ª—è —à–∏—Ä–æ–∫–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó',
        backstory="""–í–∏ - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –ø–∏—Å—å–º–µ–Ω–Ω–∏–∫.
        –í–º—ñ—î—Ç–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –¥–∞–Ω—ñ –Ω–∞ –∑—Ä–æ–∑—É–º—ñ–ª—ñ –∑–≤—ñ—Ç–∏.
        –í–∞—à—ñ –∑–≤—ñ—Ç–∏ —á–∏—Ç–∞—é—Ç—å —ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏, —ñ –∑–≤–∏—á–∞–π–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ.""",
        tools=[generate_report],
        verbose=True,
        max_iter=2
    )
    
    return researcher, analyst, reporter

# ===========================
# –°–¢–í–û–†–ï–ù–ù–Ø –ó–ê–î–ê–ß
# ===========================

def create_research_tasks(researcher, analyst, reporter, topic):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á –¥–ª—è –∫–æ–º–∞–Ω–¥–∏"""
    
    # –ó–∞–¥–∞—á–∞ 1: –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è
    research_task = Task(
        description=f"""
        –ü—Ä–æ–≤–µ–¥—ñ—Ç—å –≥–ª–∏–±–æ–∫–µ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –Ω–∞ —Ç–µ–º—É: {topic}
        
        –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ Web Search Tool –¥–ª—è –ø–æ—à—É–∫—É:
        1. –û—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–æ–≤–∏–Ω —Ç–∞ —Å—Ç–∞—Ç–µ–π
        2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞ —Ñ–∞–∫—Ç—ñ–≤
        3. –î—É–º–æ–∫ –µ–∫—Å–ø–µ—Ä—Ç—ñ–≤
        
        –ó–±–µ—Ä—ñ—Ç—å –º—ñ–Ω—ñ–º—É–º 5 –∫–ª—é—á–æ–≤–∏—Ö —Ñ–∞–∫—Ç—ñ–≤.
        """,
        expected_output="–î–µ—Ç–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ –¥–∂–µ—Ä–µ–ª–∞–º–∏",
        agent=researcher
    )
    
    # –ó–∞–¥–∞—á–∞ 2: –ê–Ω–∞–ª—ñ–∑
    analysis_task = Task(
        description="""
        –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ –∑—ñ–±—Ä–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤—ñ–¥ –¥–æ—Å–ª—ñ–¥–Ω–∏–∫–∞.
        
        –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ Data Analyzer –¥–ª—è:
        1. –í–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Ç–µ–º
        2. –ü—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        3. –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç—Ä–µ–Ω–¥—ñ–≤
        
        –°—Ç–≤–æ—Ä—ñ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑ –≤–∏—Å–Ω–æ–≤–∫–∞–º–∏.
        """,
        expected_output="–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫ –∑ –∫–ª—é—á–æ–≤–∏–º–∏ —ñ–Ω—Å–∞–π—Ç–∞–º–∏",
        agent=analyst,
        context=[research_task]  # –ó–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è
    )
    
    # –ó–∞–¥–∞—á–∞ 3: –ó–≤—ñ—Ç
    report_task = Task(
        description="""
        –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É.
        
        –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ Report Generator –¥–ª—è:
        1. –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        3. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª
        
        –ó–≤—ñ—Ç –º–∞—î –±—É—Ç–∏ –∑—Ä–æ–∑—É–º—ñ–ª–∏–º –¥–ª—è –≤—Å—ñ—Ö —Ä—ñ–≤–Ω—ñ–≤ —á–∏—Ç–∞—á—ñ–≤.
        """,
        expected_output="–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —É —Ñ–∞–π–ª",
        agent=reporter,
        context=[research_task, analysis_task]  # –ó–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –æ–±–æ—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö
    )
    
    return [research_task, analysis_task, report_task]

# ===========================
# –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø
# ===========================

def main():
    """–ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ CrewAI"""
    
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë            CREWAI MULTI-AGENT SYSTEM v2.0                    ‚ïë
    ‚ïë                    (–ë–ï–ó LANGCHAIN)                           ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # –¢–µ–º–∞ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è
    topic = "–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –≤ –æ—Å–≤—ñ—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏ 2025: –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ –≤–∏–∫–ª–∏–∫–∏"
    
    print(f"\nüéØ –¢–µ–º–∞ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è: {topic}")
    print("=" * 60)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–º–∞–Ω–¥—É
    print("\nüë• –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –∞–≥–µ–Ω—Ç—ñ–≤...")
    researcher, analyst, reporter = create_research_team()
    print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞:")
    print("   ‚Ä¢ –ì–æ–ª–æ–≤–Ω–∏–π –î–æ—Å–ª—ñ–¥–Ω–∏–∫")
    print("   ‚Ä¢ –°—Ç–∞—Ä—à–∏–π –ê–Ω–∞–ª—ñ—Ç–∏–∫")
    print("   ‚Ä¢ –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –ü–∏—Å—å–º–µ–Ω–Ω–∏–∫")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—ñ
    print("\nüìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á...")
    tasks = create_research_tasks(researcher, analyst, reporter, topic)
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á—ñ")
    
    # –§–æ—Ä–º—É—î–º–æ –µ–∫—ñ–ø–∞–∂
    print("\nüö¢ –ó–∞–ø—É—Å–∫ CrewAI...")
    crew = Crew(
        agents=[researcher, analyst, reporter],
        tasks=tasks,
        process=Process.sequential,  # –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        verbose=True,  # –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ä–æ–±–æ—Ç–∏
        memory=True,   # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–∞–º'—è—Ç—å –º—ñ–∂ –∑–∞–¥–∞—á–∞–º–∏
        cache=True,    # –ö–µ—à—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        max_rpm=10     # –û–±–º–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
    )
    
    print("\n‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î...")
    print("-" * 60)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ä–æ–±–æ—Ç—É –∫–æ–º–∞–Ω–¥–∏
        result = crew.kickoff()
        
        print("\n" + "=" * 60)
        print("‚úÖ –î–û–°–õ–Ü–î–ñ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
        print("=" * 60)
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(str(result)[:500] + "...")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_report = {
            "topic": topic,
            "result": str(result),
            "agents_count": 3,
            "tasks_count": len(tasks),
            "timestamp": datetime.now().isoformat()
        }
        
        filename = f"crewai_final_{datetime.now():%Y%m%d_%H%M%S}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(final_report, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç: {filename}")
        print("üìÅ –¢–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ .md —Ñ–∞–π–ª–∏")
        
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        print("\nüí° –ü—ñ–¥–∫–∞–∑–∫–∏:")
        print("1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª—ñ")
        print("2. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install crewai crewai-tools")
        print("3. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º–µ–Ω—à–∏—Ç–∏ max_iter –¥–ª—è –∞–≥–µ–Ω—Ç—ñ–≤")
    
    print("\n" + "=" * 60)
    print("üìö –ù–∞–≤—á–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏:")
    print("‚Ä¢ –ó–º—ñ–Ω—ñ—Ç—å —Ä–æ–ª—ñ –∞–≥–µ–Ω—Ç—ñ–≤ –≤ create_research_team()")
    print("‚Ä¢ –î–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —á–µ—Ä–µ–∑ @tool –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä")
    print("‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ Process.hierarchical –¥–ª—è —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏")
    print("‚Ä¢ –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–π—Ç–µ –∑ context –º—ñ–∂ –∑–∞–¥–∞—á–∞–º–∏")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –†–æ–±–æ—Ç—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
