"""
–ú–æ–¥—É–ª—å 1: AI Research Agent –Ω–∞ CrewAI (v1.0)
–¢–æ–π —Å–∞–º–∏–π –∞–≥–µ–Ω—Ç-–¥–æ—Å–ª—ñ–¥–Ω–∏–∫ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ LangChain
"""

import os
from typing import Dict, List, Any
from crewai import Agent, Task, Crew, Process
from crewai.tools import tool
from langchain_openai import ChatOpenAI
from datetime import datetime
import json

# ===========================
# –ë–ê–ó–û–í–ò–ô –ê–ì–ï–ù–¢-–î–û–°–õ–Ü–î–ù–ò–ö
# ===========================

class CrewAIResearchAgent:
    """
    –ê–≥–µ–Ω—Ç-–¥–æ—Å–ª—ñ–¥–Ω–∏–∫ –Ω–∞ CrewAI v1.0
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î role-based –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É
    """
    
    def __init__(self, api_key: str = None):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞"""
        # LLM –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        self.llm = ChatOpenAI(
            model="gpt-4",
            temperature=0.7,
            api_key=api_key or os.getenv("OPENAI_API_KEY")
        )
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        self.tools = self._create_tools()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞
        self.agent = self._create_agent()
    
    def _create_tools(self) -> List:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–±–æ—Ä—É —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è"""
        
        @tool("Web Search")
        def search_web(query: str) -> str:
            """
            –ü–æ—à—É–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ.
            –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
            """
            from duckduckgo_search import DDGS
            try:
                with DDGS() as ddgs:
                    results = list(ddgs.text(query, max_results=3))
                    formatted = "\n".join([f"- {r['title']}: {r['body'][:200]}..." for r in results])
                    return f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:\n{formatted}"
            except:
                return "–ü–æ—à—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
        
        @tool("Get Current Date")
        def get_current_date() -> str:
            """
            –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å.
            –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è —á–∞—Å–æ–≤–∏—Ö –º—ñ—Ç–æ–∫ —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è.
            """
            return datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        @tool("Sentiment Analysis")
        def analyze_sentiment(text: str) -> str:
            """
            –ê–Ω–∞–ª—ñ–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É.
            –í–∏–∑–Ω–∞—á–∞—î –µ–º–æ—Ü—ñ–π–Ω–µ –∑–∞–±–∞—Ä–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
            """
            positive_words = ["–¥–æ–±—Ä–µ", "—á—É–¥–æ–≤–æ", "—É—Å–ø—ñ—Ö", "–ø–æ–∑–∏—Ç–∏–≤", "—ñ–Ω–Ω–æ–≤–∞—Ü—ñ—è"]
            negative_words = ["–ø—Ä–æ–±–ª–µ–º–∞", "–≤–∏–∫–ª–∏–∫", "—Ä–∏–∑–∏–∫", "—Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å"]
            
            text_lower = text.lower()
            pos_count = sum(1 for word in positive_words if word in text_lower)
            neg_count = sum(1 for word in negative_words if word in text_lower)
            
            if pos_count > neg_count:
                sentiment = "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞"
            elif neg_count > pos_count:
                sentiment = "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞"
            else:
                sentiment = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞"
            
            return f"–¢–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å: {sentiment} (–ø–æ–∑–∏—Ç–∏–≤: {pos_count}, –Ω–µ–≥–∞—Ç–∏–≤: {neg_count})"
        
        @tool("Save to Memory")
        def save_to_memory(data: str) -> str:
            """
            –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –ø–∞–º'—è—Ç—å.
            –î–æ–∑–≤–æ–ª—è—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Ñ–∞–∫—Ç–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.
            """
            memory_file = "crewai_memory.json"
            try:
                with open(memory_file, 'r') as f:
                    memory = json.load(f)
            except:
                memory = {"facts": []}
            
            memory["facts"].append({
                "data": data,
                "timestamp": datetime.now().isoformat()
            })
            
            with open(memory_file, 'w') as f:
                json.dump(memory, f, ensure_ascii=False, indent=2)
            
            return f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–∞–º'—è—Ç—å: {data[:50]}..."
        
        return [search_web, get_current_date, analyze_sentiment, save_to_memory]
    
    def _create_agent(self) -> Agent:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞-–¥–æ—Å–ª—ñ–¥–Ω–∏–∫–∞"""
        agent = Agent(
            role='–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –¥–æ—Å–ª—ñ–¥–Ω–∏–∫',
            goal='–ó—ñ–±—Ä–∞—Ç–∏ —Ç–∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞ —Ç–µ–º–æ—é –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è',
            backstory="""–í–∏ - –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –¥–æ—Å–ª—ñ–¥–Ω–∏–∫ –∑ 10-—Ä—ñ—á–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º —Ä–æ–±–æ—Ç–∏ 
            –≤ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö —Ü–µ–Ω—Ç—Ä–∞—Ö. –í–∞—à–∞ –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –≤–∫–ª—é—á–∞—î –∑–±—ñ—Ä –¥–∞–Ω–∏—Ö, 
            –∞–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤ —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –æ–±“ë—Ä—É–Ω—Ç–æ–≤–∞–Ω–∏—Ö –≤–∏—Å–Ω–æ–≤–∫—ñ–≤.""",
            tools=self.tools,
            llm=self.llm,
            verbose=True,
            allow_delegation=False,
            max_iter=5
        )
        return agent
    
    def research(self, topic: str) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –Ω–∞ –∑–∞–¥–∞–Ω—É —Ç–µ–º—É"""
        print(f"\nüîç CrewAI Agent: –ü–æ—á–∏–Ω–∞—é –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —Ç–µ–º–∏ '{topic}'")
        print("=" * 60)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è
        research_task = Task(
            description=f"""
            –ü—Ä–æ–≤–µ–¥—ñ—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω–µ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –Ω–∞ —Ç–µ–º—É: {topic}
            
            –í–∞—à—ñ –∫—Ä–æ–∫–∏:
            1. –ó–Ω–∞–π–¥—ñ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –≤–µ–±-–ø–æ—à—É–∫
            2. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –∑–Ω–∞–π–¥–µ–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
            3. –ó–±–µ—Ä–µ–∂—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Ñ–∞–∫—Ç–∏ –≤ –ø–∞–º'—è—Ç—å
            4. –°—Ñ–æ—Ä–º—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫
            """,
            expected_output="–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –∑ –≤–∏—Å–Ω–æ–≤–∫–∞–º–∏",
            agent=self.agent
        )
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫—ñ–ø–∞–∂—É –∑ –æ–¥–Ω–∏–º –∞–≥–µ–Ω—Ç–æ–º
        crew = Crew(
            agents=[self.agent],
            tasks=[research_task],
            process=Process.sequential,
            verbose=True
        )
        
        try:
            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è
            result = crew.kickoff()
            
            return {
                "topic": topic,
                "result": str(result),
                "agent_role": self.agent.role,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            return {
                "topic": topic,
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }

# ===========================
# –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø
# ===========================

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∞–≥–µ–Ω—Ç—ñ–≤ CrewAI"""
    
    research_topic = "–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –≤ –æ—Å–≤—ñ—Ç—ñ 2025"
    
    print("\nüö¢ CREWAI AGENT DEMO")
    print("=" * 60)
    
    agent = CrewAIResearchAgent()
    result = agent.research(research_topic)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"–¢–µ–º–∞: {result['topic']}")
    print(f"–†–æ–ª—å –∞–≥–µ–Ω—Ç–∞: {result.get('agent_role', 'N/A')}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('result', '–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É')[:300]}...")

if __name__ == "__main__":
    # os.environ["OPENAI_API_KEY"] = "your-key-here"
    
    try:
        main()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        print("\n–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:")
        print("1. OPENAI_API_KEY")
        print("2. pip install crewai crewai-tools")
