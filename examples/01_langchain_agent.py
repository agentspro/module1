"""
–ú–æ–¥—É–ª—å 1: AI Research Agent –Ω–∞ LangChain (v1.0)
–Ñ–¥–∏–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ –∞–≥–µ–Ω—Ç–∞-–¥–æ—Å–ª—ñ–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫—ñ–≤
"""

import os
from typing import Dict, List, Any
from langchain_openai import ChatOpenAI
from langchain_core.tools import tool
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from langchain.agents import create_tool_calling_agent, AgentExecutor
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_community.tools import DuckDuckGoSearchRun
from datetime import datetime
import json

# ===========================
# –ë–ê–ó–û–í–ò–ô –ê–ì–ï–ù–¢-–î–û–°–õ–Ü–î–ù–ò–ö
# ===========================

class LangChainResearchAgent:
    """
    –ê–≥–µ–Ω—Ç-–¥–æ—Å–ª—ñ–¥–Ω–∏–∫ –Ω–∞ LangChain v1.0
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–æ–≤—É –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É –∑ tool calling
    """
    
    def __init__(self, api_key: str = None):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞"""
        # LLM –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é tool calling
        self.llm = ChatOpenAI(
            model="gpt-4",
            temperature=0.7,
            api_key=api_key or os.getenv("OPENAI_API_KEY")
        )
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        self.tools = self._create_tools()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É
        self.prompt = self._create_prompt()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞ –∑ –Ω–æ–≤–æ—é –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é
        self.agent = self._create_agent()
    
    def _create_tools(self) -> List:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–±–æ—Ä—É —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è"""
        
        @tool
        def search_web(query: str) -> str:
            """–ü–æ—à—É–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ"""
            search = DuckDuckGoSearchRun()
            results = search.run(query)
            return f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É: {results[:500]}..."
        
        @tool
        def get_current_date() -> str:
            """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å"""
            return datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        @tool
        def analyze_sentiment(text: str) -> Dict:
            """–ê–Ω–∞–ª—ñ–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É"""
            # –°–ø—Ä–æ—â–µ–Ω–∞ —ñ–º—ñ—Ç–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É
            positive_words = ["–¥–æ–±—Ä–µ", "—á—É–¥–æ–≤–æ", "—É—Å–ø—ñ—Ö", "–ø–æ–∑–∏—Ç–∏–≤", "good", "great"]
            negative_words = ["–ø–æ–≥–∞–Ω–æ", "–ø—Ä–æ–±–ª–µ–º–∞", "–Ω–µ–≥–∞—Ç–∏–≤", "bad", "problem"]
            
            text_lower = text.lower()
            pos_count = sum(1 for word in positive_words if word in text_lower)
            neg_count = sum(1 for word in negative_words if word in text_lower)
            
            if pos_count > neg_count:
                sentiment = "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞"
            elif neg_count > pos_count:
                sentiment = "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞"
            else:
                sentiment = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞"
            
            return {
                "sentiment": sentiment,
                "positive_score": pos_count,
                "negative_score": neg_count
            }
        
        @tool
        def save_to_memory(key: str, value: str) -> str:
            """–ó–±–µ—Ä–µ–≥—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –ø–∞–º'—è—Ç—å"""
            memory_file = "agent_memory.json"
            try:
                with open(memory_file, 'r') as f:
                    memory = json.load(f)
            except:
                memory = {}
            
            memory[key] = value
            
            with open(memory_file, 'w') as f:
                json.dump(memory, f, ensure_ascii=False, indent=2)
            
            return f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ: {key}"
        
        return [search_web, get_current_date, analyze_sentiment, save_to_memory]
    
    def _create_prompt(self) -> ChatPromptTemplate:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        system_prompt = """–í–∏ - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∞–≥–µ–Ω—Ç-–¥–æ—Å–ª—ñ–¥–Ω–∏–∫. –í–∞—à—ñ –æ–±–æ–≤'—è–∑–∫–∏:
        1. –ó–±—ñ—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞ —Ç–µ–º–æ—é
        2. –ê–Ω–∞–ª—ñ–∑ –∑—ñ–±—Ä–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        3. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞–∂–ª–∏–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        4. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏—Ö –≤–∏—Å–Ω–æ–≤–∫—ñ–≤
        
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á."""
        
        prompt = ChatPromptTemplate.from_messages([
            ("system", system_prompt),
            MessagesPlaceholder("chat_history", optional=True),
            ("human", "{input}"),
            MessagesPlaceholder("agent_scratchpad")
        ])
        
        return prompt
    
    def _create_agent(self) -> AgentExecutor:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞ –∑ –Ω–æ–≤–æ—é –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é LangChain"""
        agent = create_tool_calling_agent(
            llm=self.llm,
            tools=self.tools,
            prompt=self.prompt
        )
        
        agent_executor = AgentExecutor(
            agent=agent,
            tools=self.tools,
            verbose=True,
            max_iterations=5,
            handle_parsing_errors=True
        )
        
        return agent_executor
    
    def research(self, topic: str) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –Ω–∞ –∑–∞–¥–∞–Ω—É —Ç–µ–º—É"""
        print(f"\nüîç LangChain Agent: –ü–æ—á–∏–Ω–∞—é –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —Ç–µ–º–∏ '{topic}'")
        print("=" * 60)
        
        try:
            result = self.agent.invoke({
                "input": f"–ü—Ä–æ–≤–µ–¥—ñ—Ç—å –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –Ω–∞ —Ç–µ–º—É: {topic}"
            })
            
            return {
                "topic": topic,
                "result": result.get("output", ""),
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            return {
                "topic": topic,
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }

# ===========================
# –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø
# ===========================

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∞–≥–µ–Ω—Ç—ñ–≤"""
    
    research_topic = "–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –≤ –æ—Å–≤—ñ—Ç—ñ 2025"
    
    print("\nü§ñ LANGCHAIN AGENT DEMO")
    print("=" * 60)
    
    agent = LangChainResearchAgent()
    result = agent.research(research_topic)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"–¢–µ–º–∞: {result['topic']}")
    print(f"–í–∏—Å–Ω–æ–≤–æ–∫: {result.get('result', '–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É')[:300]}...")

if __name__ == "__main__":
    # os.environ["OPENAI_API_KEY"] = "your-key-here"
    
    try:
        main()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ OPENAI_API_KEY")
