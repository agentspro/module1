"""
–ú–æ–¥—É–ª—å 1: AI Research Agent –Ω–∞ LangChain
–°—É–º—ñ—Å–Ω–∏–π –∑ —Ä—ñ–∑–Ω–∏–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏ LangChain
"""

import os
from typing import Dict, List, Any
from datetime import datetime
import json

try:
    # –î–ª—è –Ω–æ–≤—ñ—à–∏—Ö –≤–µ—Ä—Å—ñ–π LangChain (0.2+)
    from langchain.agents import create_react_agent, AgentExecutor
    from langchain import hub
    USE_REACT = True
except ImportError:
    # –î–ª—è —Å—Ç–∞—Ä—ñ—à–∏—Ö –≤–µ—Ä—Å—ñ–π LangChain
    from langchain.agents import initialize_agent, AgentExecutor, AgentType
    USE_REACT = False

from langchain_openai import ChatOpenAI
from langchain_core.tools import tool
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_community.tools import DuckDuckGoSearchRun

# ===========================
# –ë–ê–ó–û–í–ò–ô –ê–ì–ï–ù–¢-–î–û–°–õ–Ü–î–ù–ò–ö
# ===========================

class LangChainResearchAgent:
    """
    –ê–≥–µ–Ω—Ç-–¥–æ—Å–ª—ñ–¥–Ω–∏–∫ –Ω–∞ LangChain
    –°—É–º—ñ—Å–Ω–∏–π –∑ —Ä—ñ–∑–Ω–∏–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫—É
    """
    
    def __init__(self, api_key: str = None):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞"""
        # LLM
        self.llm = ChatOpenAI(
            model="gpt-4",
            temperature=0.7,
            api_key=api_key or os.getenv("OPENAI_API_KEY")
        )
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        self.tools = self._create_tools()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–µ—Ä—Å—ñ—ó
        self.agent_executor = self._create_agent()
    
    def _create_tools(self) -> List:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–±–æ—Ä—É —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è"""
        
        @tool
        def search_web(query: str) -> str:
            """–ü–æ—à—É–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ"""
            try:
                search = DuckDuckGoSearchRun()
                results = search.run(query)
                return f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É: {results[:500]}..."
            except Exception as e:
                return f"–°–∏–º—É–ª—è—Ü—ñ—è –ø–æ—à—É–∫—É –¥–ª—è '{query}': –ó–Ω–∞–π–¥–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ AI –≤ –æ—Å–≤—ñ—Ç—ñ, –≤–∫–ª—é—á–∞—é—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é."
        
        @tool
        def get_current_date() -> str:
            """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å"""
            return datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        @tool
        def analyze_sentiment(text: str) -> str:
            """–ê–Ω–∞–ª—ñ–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É"""
            positive_words = ["–¥–æ–±—Ä–µ", "—á—É–¥–æ–≤–æ", "—É—Å–ø—ñ—Ö", "–ø–æ–∑–∏—Ç–∏–≤", "good", "great", "–ø—Ä–æ–≥—Ä–µ—Å", "—ñ–Ω–Ω–æ–≤–∞—Ü—ñ—è"]
            negative_words = ["–ø–æ–≥–∞–Ω–æ", "–ø—Ä–æ–±–ª–µ–º–∞", "–Ω–µ–≥–∞—Ç–∏–≤", "bad", "problem", "–≤–∏–∫–ª–∏–∫", "—Ä–∏–∑–∏–∫"]
            
            text_lower = text.lower()
            pos_count = sum(1 for word in positive_words if word in text_lower)
            neg_count = sum(1 for word in negative_words if word in text_lower)
            
            if pos_count > neg_count:
                sentiment = "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞"
            elif neg_count > pos_count:
                sentiment = "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞"
            else:
                sentiment = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞"
            
            return f"–¢–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å: {sentiment} (–ø–æ–∑–∏—Ç–∏–≤: {pos_count}, –Ω–µ–≥–∞—Ç–∏–≤: {neg_count})"
        
        @tool
        def save_to_memory(key: str, value: str) -> str:
            """–ó–±–µ—Ä–µ–≥—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –ø–∞–º'—è—Ç—å"""
            memory_file = "agent_memory.json"
            try:
                with open(memory_file, 'r') as f:
                    memory = json.load(f)
            except:
                memory = {}
            
            memory[key] = {
                "value": value,
                "timestamp": datetime.now().isoformat()
            }
            
            with open(memory_file, 'w') as f:
                json.dump(memory, f, ensure_ascii=False, indent=2)
            
            return f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ: {key} = {value[:50]}..."
        
        return [search_web, get_current_date, analyze_sentiment, save_to_memory]
    
    def _create_agent(self) -> AgentExecutor:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–µ—Ä—Å—ñ—ó LangChain"""
        
        if USE_REACT:
            # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ ReAct –∞–≥–µ–Ω—Ç–∞ (–Ω–æ–≤–∞ –≤–µ—Ä—Å—ñ—è)
            try:
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É
                prompt = ChatPromptTemplate.from_messages([
                    ("system", """–í–∏ - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∞–≥–µ–Ω—Ç-–¥–æ—Å–ª—ñ–¥–Ω–∏–∫. –í–∞—à—ñ –æ–±–æ–≤'—è–∑–∫–∏:
                    1. –ó–±—ñ—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞ —Ç–µ–º–æ—é
                    2. –ê–Ω–∞–ª—ñ–∑ –∑—ñ–±—Ä–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                    3. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞–∂–ª–∏–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
                    4. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏—Ö –≤–∏—Å–Ω–æ–≤–∫—ñ–≤
                    
                    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á."""),
                    ("human", "{input}"),
                    MessagesPlaceholder(variable_name="agent_scratchpad", optional=True)
                ])
                
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è ReAct –∞–≥–µ–Ω—Ç–∞
                from langchain.agents import create_react_agent
                agent = create_react_agent(
                    llm=self.llm,
                    tools=self.tools,
                    prompt=prompt
                )
                
                agent_executor = AgentExecutor(
                    agent=agent,
                    tools=self.tools,
                    verbose=True,
                    max_iterations=5,
                    handle_parsing_errors=True
                )
                
            except Exception as e:
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ ReAct –∞–≥–µ–Ω—Ç–∞: {e}")
                # Fallback –¥–æ –ø—Ä–æ—Å—Ç—ñ—à–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É
                agent_executor = self._create_simple_agent()
                
        else:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä–∏–π —Å–ø–æ—Å—ñ–± —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            agent_executor = self._create_simple_agent()
        
        return agent_executor
    
    def _create_simple_agent(self) -> AgentExecutor:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞ —Å—Ç–∞—Ä–∏–º —Å–ø–æ—Å–æ–±–æ–º (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)"""
        try:
            from langchain.agents import initialize_agent, AgentType
            
            agent_executor = initialize_agent(
                tools=self.tools,
                llm=self.llm,
                agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
                verbose=True,
                max_iterations=5,
                handle_parsing_errors=True
            )
            return agent_executor
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞: {e}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é
            return self._create_minimal_executor()
    
    def _create_minimal_executor(self):
        """–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤ –Ω–µ—Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ"""
        class MinimalExecutor:
            def __init__(self, llm, tools):
                self.llm = llm
                self.tools = tools
            
            def invoke(self, inputs):
                # –ü—Ä–æ—Å—Ç–∞ —Å–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∞–≥–µ–Ω—Ç–∞
                query = inputs.get("input", "")
                
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –≤—Ä—É—á–Ω—É
                results = []
                for tool_func in self.tools:
                    if "search" in tool_func.name.lower() and "AI" in query:
                        result = tool_func.func("AI –≤ –æ—Å–≤—ñ—Ç—ñ")
                        results.append(result)
                    elif "date" in tool_func.name.lower():
                        result = tool_func.func()
                        results.append(f"–î–∞—Ç–∞: {result}")
                
                output = f"–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è '{query}':\n" + "\n".join(results) if results else f"–í–∏–∫–æ–Ω–∞–Ω–æ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è: {query}"
                return {"output": output}
        
        return MinimalExecutor(self.llm, self.tools)
    
    def research(self, topic: str) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –Ω–∞ –∑–∞–¥–∞–Ω—É —Ç–µ–º—É"""
        print(f"\nüîç LangChain Agent: –ü–æ—á–∏–Ω–∞—é –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —Ç–µ–º–∏ '{topic}'")
        print("=" * 60)
        
        try:
            # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
            result = self.agent_executor.invoke({
                "input": f"""–ü—Ä–æ–≤–µ–¥—ñ—Ç—å –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –Ω–∞ —Ç–µ–º—É: {topic}
                
                –ö—Ä–æ–∫–∏:
                1. –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
                2. –ó–Ω–∞–π–¥—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –ø–æ—à—É–∫
                3. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
                4. –ó–±–µ—Ä–µ–∂—ñ—Ç—å –≤–∞–∂–ª–∏–≤—ñ —Ñ–∞–∫—Ç–∏
                5. –°—Ñ–æ—Ä–º—É–π—Ç–µ –≤–∏—Å–Ω–æ–≤–æ–∫
                """
            })
            
            return {
                "topic": topic,
                "result": result.get("output", ""),
                "timestamp": datetime.now().isoformat(),
                "status": "success"
            }
            
        except Exception as e:
            # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø—Ä–æ—â–µ–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
            print(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Å–ø—Ä–æ—â–µ–Ω–∏–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É: {e}")
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –≤—Ä—É—á–Ω—É
            results = []
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –Ω–∞–ø—Ä—è–º—É
            for tool_func in self.tools:
                try:
                    if "date" in tool_func.name.lower():
                        date_result = tool_func.func()
                        results.append(f"–î–∞—Ç–∞ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è: {date_result}")
                    elif "search" in tool_func.name.lower():
                        search_result = tool_func.func(topic)
                        results.append(search_result)
                    elif "sentiment" in tool_func.name.lower():
                        sentiment_result = tool_func.func(topic)
                        results.append(sentiment_result)
                except:
                    continue
            
            final_result = "\n\n".join(results) if results else f"–ë–∞–∑–æ–≤–µ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —Ç–µ–º–∏ '{topic}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
            
            return {
                "topic": topic,
                "result": final_result,
                "timestamp": datetime.now().isoformat(),
                "status": "fallback"
            }

# ===========================
# –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø
# ===========================

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∞–≥–µ–Ω—Ç—ñ–≤"""
    
    research_topic = "–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –≤ –æ—Å–≤—ñ—Ç—ñ 2025"
    
    print("\nü§ñ LANGCHAIN AGENT DEMO")
    print("=" * 60)
    print(f"–í–µ—Ä—Å—ñ—è LangChain: —Å–ø—Ä–æ–±–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è")
    print("=" * 60)
    
    try:
        agent = LangChainResearchAgent()
        result = agent.research(research_topic)
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"–¢–µ–º–∞: {result['topic']}")
        print(f"–°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
        print(f"–ß–∞—Å: {result.get('timestamp', 'N/A')}")
        print(f"\n–í–∏—Å–Ω–æ–≤–æ–∫: {result.get('result', '–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É')[:500]}...")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open("langchain_result.json", "w", encoding="utf-8") as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ langchain_result.json")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        print("\nüîß –ú–æ–∂–ª–∏–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è:")
        print("1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–µ—Ä—Å—ñ—é LangChain: pip show langchain")
        print("2. –û–Ω–æ–≤—ñ—Ç—å LangChain: pip install --upgrade langchain langchain-openai langchain-community")
        print("3. –ê–±–æ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –≤–µ—Ä—Å—ñ—é: pip install langchain==0.1.0")

if __name__ == "__main__":
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API –∫–ª—é—á–∞
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env")
        print("\n–ü—Ä–∏–∫–ª–∞–¥:")
        print("export OPENAI_API_KEY='sk-your-key-here'")
        print("–∞–±–æ")
        print("echo 'OPENAI_API_KEY=sk-your-key-here' > .env")
    else:
        try:
            main()
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        except Exception as e:
            print(f"\n‚ùå –ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            import traceback
            traceback.print_exc()
