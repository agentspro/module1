"""
–ú–æ–¥—É–ª—å 1: AI Research Agent –Ω–∞ LangChain
–°—É–º—ñ—Å–Ω–∏–π –∑ LangChain v1.0+
"""

import os
from typing import Dict, List, Any
from datetime import datetime
import json

# –ü—Ä–∞–≤–∏–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ –¥–ª—è LangChain v1.0+
from langchain_openai import ChatOpenAI
from langchain_core.tools import tool
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_community.tools import DuckDuckGoSearchRun

# –î–ª—è LangChain v1.0+ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π —Å–ø–æ—Å—ñ–±
from langchain.agents import AgentExecutor
from langchain_core.runnables import RunnablePassthrough
from langchain_core.output_parsers import StrOutputParser

# ===========================
# –ë–ê–ó–û–í–ò–ô –ê–ì–ï–ù–¢-–î–û–°–õ–Ü–î–ù–ò–ö
# ===========================

class LangChainResearchAgent:
    """
    –ê–≥–µ–Ω—Ç-–¥–æ—Å–ª—ñ–¥–Ω–∏–∫ –Ω–∞ LangChain v1.0+
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å—É—á–∞—Å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –∑ Runnables
    """
    
    def __init__(self, api_key: str = None):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞"""
        # LLM
        self.llm = ChatOpenAI(
            model="gpt-4",
            temperature=0.7,
            api_key=api_key or os.getenv("OPENAI_API_KEY")
        )
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        self.tools = self._create_tools()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞
        self.agent_executor = self._create_agent()
    
    def _create_tools(self) -> List:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–±–æ—Ä—É —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è"""
        
        @tool
        def search_web(query: str) -> str:
            """–ü–æ—à—É–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ"""
            try:
                search = DuckDuckGoSearchRun()
                results = search.run(query)
                return f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è '{query}': {results[:500]}..."
            except Exception as e:
                # Fallback –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
                return f"[–î–µ–º–æ –ø–æ—à—É–∫] –î–ª—è –∑–∞–ø–∏—Ç—É '{query}' –∑–Ω–∞–π–¥–µ–Ω–æ: AI —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î –æ—Å–≤—ñ—Ç—É —á–µ—Ä–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—é –Ω–∞–≤—á–∞–Ω–Ω—è, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è —Ç–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ñ –Ω–∞–≤—á–∞–ª—å–Ω—ñ —Å–∏—Å—Ç–µ–º–∏. –û—Å–Ω–æ–≤–Ω—ñ —Ç—Ä–µ–Ω–¥–∏: 1) –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ç—Ä–∞—î–∫—Ç–æ—Ä—ñ—ó –Ω–∞–≤—á–∞–Ω–Ω—è 2) AI-—Ç—å—é—Ç–æ—Ä–∏ 3) –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–¥–∞–Ω—å."
        
        @tool
        def get_current_date() -> str:
            """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å"""
            return datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        @tool
        def analyze_sentiment(text: str) -> str:
            """–ê–Ω–∞–ª—ñ–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É"""
            positive_words = ["–¥–æ–±—Ä–µ", "—á—É–¥–æ–≤–æ", "—É—Å–ø—ñ—Ö", "–ø–æ–∑–∏—Ç–∏–≤", "good", "great", 
                            "–ø—Ä–æ–≥—Ä–µ—Å", "—ñ–Ω–Ω–æ–≤–∞—Ü—ñ—è", "–ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è", "–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"]
            negative_words = ["–ø–æ–≥–∞–Ω–æ", "–ø—Ä–æ–±–ª–µ–º–∞", "–Ω–µ–≥–∞—Ç–∏–≤", "bad", "problem", 
                            "–≤–∏–∫–ª–∏–∫", "—Ä–∏–∑–∏–∫", "—Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å", "–∑–∞–≥—Ä–æ–∑–∞"]
            
            text_lower = text.lower()
            pos_count = sum(1 for word in positive_words if word in text_lower)
            neg_count = sum(1 for word in negative_words if word in text_lower)
            
            if pos_count > neg_count:
                sentiment = "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞"
            elif neg_count > pos_count:
                sentiment = "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞"
            else:
                sentiment = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞"
            
            return f"–¢–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å: {sentiment} (–ø–æ–∑–∏—Ç–∏–≤–Ω—ñ –º–∞—Ä–∫–µ—Ä–∏: {pos_count}, –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ: {neg_count})"
        
        @tool
        def save_to_memory(key: str, value: str) -> str:
            """–ó–±–µ—Ä–µ–≥—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –ø–∞–º'—è—Ç—å"""
            memory_file = "agent_memory.json"
            try:
                with open(memory_file, 'r') as f:
                    memory = json.load(f)
            except:
                memory = {}
            
            memory[key] = {
                "value": value,
                "timestamp": datetime.now().isoformat()
            }
            
            with open(memory_file, 'w') as f:
                json.dump(memory, f, ensure_ascii=False, indent=2)
            
            return f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–∞–º'—è—Ç—å: {key}"
        
        return [search_web, get_current_date, analyze_sentiment, save_to_memory]
    
    def _create_agent(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è LangChain v1.0+"""
        
        # –ü—Ä–æ—Å—Ç—ñ—à–∏–π –ø—ñ–¥—Ö—ñ–¥ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ LLM –Ω–∞–ø—Ä—è–º—É –∑ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
        class SimpleAgent:
            def __init__(self, llm, tools):
                self.llm = llm
                self.tools = tools
                self.tool_map = {tool.name: tool for tool in tools}
            
            def invoke(self, inputs):
                query = inputs.get("input", "")
                
                # –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
                system_prompt = """–í–∏ - –∞–≥–µ–Ω—Ç-–¥–æ—Å–ª—ñ–¥–Ω–∏–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —Ç–µ–º–∏.
                
                –î–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏:
                - search_web: –ø–æ—à—É–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ
                - get_current_date: –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
                - analyze_sentiment: –∞–Ω–∞–ª—ñ–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É
                - save_to_memory: –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ –ø–∞–º'—è—Ç—å
                
                –ü—Ä–æ–≤–µ–¥—ñ—Ç—å –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º."""
                
                # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                messages = [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": query}
                ]
                
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ LLM
                    response = self.llm.invoke(messages)
                    
                    # –í–∏–∫–æ–Ω—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –≤—Ä—É—á–Ω—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
                    results = []
                    
                    # –ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É
                    date_tool = self.tool_map.get("get_current_date")
                    if date_tool:
                        date_result = date_tool.func()
                        results.append(f"üìÖ –î–∞—Ç–∞ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è: {date_result}")
                    
                    # –ö—Ä–æ–∫ 2: –ü–æ—à—É–∫
                    search_tool = self.tool_map.get("search_web")
                    if search_tool and "AI" in query:
                        search_result = search_tool.func(query)
                        results.append(f"\nüîç –ü–æ—à—É–∫:\n{search_result}")
                    
                    # –ö—Ä–æ–∫ 3: –ê–Ω–∞–ª—ñ–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
                    sentiment_tool = self.tool_map.get("analyze_sentiment")
                    if sentiment_tool and len(results) > 0:
                        sentiment_result = sentiment_tool.func(str(results))
                        results.append(f"\nüìä {sentiment_result}")
                    
                    # –ö—Ä–æ–∫ 4: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
                    memory_tool = self.tool_map.get("save_to_memory")
                    if memory_tool:
                        memory_result = memory_tool.func("research_result", query)
                        results.append(f"\nüíæ {memory_result}")
                    
                    # –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                    if results:
                        final_output = f"–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —Ç–µ–º–∏: {query}\n\n" + "\n".join(results)
                    else:
                        final_output = response.content if hasattr(response, 'content') else str(response)
                    
                    return {"output": final_output}
                    
                except Exception as e:
                    # Fallback
                    return {
                        "output": f"–í–∏–∫–æ–Ω–∞–Ω–æ –±–∞–∑–æ–≤–µ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —Ç–µ–º–∏: {query}\n"
                                f"–°—Ç–∞—Ç—É—Å: –î–µ–º–æ —Ä–µ–∂–∏–º\n"
                                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: AI –≤ –æ—Å–≤—ñ—Ç—ñ - –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∏–π –Ω–∞–ø—Ä—è–º–æ–∫"
                    }
        
        return SimpleAgent(self.llm, self.tools)
    
    def research(self, topic: str) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –Ω–∞ –∑–∞–¥–∞–Ω—É —Ç–µ–º—É"""
        print(f"\nüîç LangChain Agent: –ü–æ—á–∏–Ω–∞—é –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —Ç–µ–º–∏ '{topic}'")
        print("=" * 60)
        
        try:
            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è
            result = self.agent_executor.invoke({
                "input": topic
            })
            
            return {
                "topic": topic,
                "result": result.get("output", ""),
                "timestamp": datetime.now().isoformat(),
                "status": "success"
            }
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
            
            # –î–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            demo_result = f"""
–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è: {topic}

üìÖ –ß–∞—Å: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

üîç –û—Å–Ω–æ–≤–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏:
1. AI –∞–∫—Ç–∏–≤–Ω–æ –≤–ø—Ä–æ–≤–∞–¥–∂—É—î—Ç—å—Å—è –≤ –æ—Å–≤—ñ—Ç–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏
2. –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–≤—á–∞–Ω–Ω—è - –∫–ª—é—á–æ–≤–∏–π —Ç—Ä–µ–Ω–¥
3. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è —Ä—É—Ç–∏–Ω–Ω–∏—Ö –∑–∞–¥–∞—á –≤–∏–≤—ñ–ª—å–Ω—è—î —á–∞—Å –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤
4. –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ —Å–∏—Å—Ç–µ–º–∏ –ø–æ–∫—Ä–∞—â—É—é—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤

üìä –¢–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å: –ü–µ—Ä–µ–≤–∞–∂–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–∞

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
- –í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è AI –º–∞—î –±—É—Ç–∏ –ø–æ—Å—Ç—É–ø–æ–≤–∏–º
- –í–∞–∂–ª–∏–≤–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –ª—é–¥—Å—å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä
- –ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤

‚úÖ –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–¥–µ–º–æ —Ä–µ–∂–∏–º)
            """
            
            return {
                "topic": topic,
                "result": demo_result,
                "timestamp": datetime.now().isoformat(),
                "status": "demo"
            }

# ===========================
# –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø
# ===========================

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∞–≥–µ–Ω—Ç—ñ–≤"""
    
    research_topic = "–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –≤ –æ—Å–≤—ñ—Ç—ñ 2025"
    
    print("\nü§ñ LANGCHAIN AGENT DEMO")
    print("=" * 60)
    print(f"–í–µ—Ä—Å—ñ—è LangChain: v1.0+")
    print("=" * 60)
    
    try:
        agent = LangChainResearchAgent()
        result = agent.research(research_topic)
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"–¢–µ–º–∞: {result['topic']}")
        print(f"–°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
        print(f"–ß–∞—Å: {result.get('timestamp', 'N/A')}")
        print(f"\nüìù –í–∏—Å–Ω–æ–≤–æ–∫:")
        print(result.get('result', '–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É'))
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open("langchain_result.json", "w", encoding="utf-8") as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ langchain_result.json")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        print("\nüîß –ú–æ–∂–ª–∏–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è:")
        print("1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª—ñ")
        print("2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("3. –°–ø—Ä–æ–±—É–π—Ç–µ: pip install --upgrade langchain langchain-openai")

if __name__ == "__main__":
    # –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ .env
    try:
        from dotenv import load_dotenv
        load_dotenv()
        print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    except:
        pass
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API –∫–ª—é—á–∞
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        print("–ü—Ä–∞—Ü—é—é –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º—ñ...")
        print("\n–î–ª—è –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ—ó —Ä–æ–±–æ—Ç–∏:")
        print("1. –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env")
        print("2. –î–æ–¥–∞–π—Ç–µ: OPENAI_API_KEY=sk-your-key-here")
    else:
        print(f"‚úÖ API –∫–ª—é—á –∑–Ω–∞–π–¥–µ–Ω–æ: {api_key[:7]}...{api_key[-4:]}")
    
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
