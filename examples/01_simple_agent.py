"""
Simple AI Research Agent –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
–í–µ—Ä—Å—ñ—è: –Ω–∞–≤—á–∞–ª—å–Ω–∞ (100 —Ä—è–¥–∫—ñ–≤ –∫–æ–¥—É)
–ú–µ—Ç–∞: –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –±–∞–∑–æ–≤—ñ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó AI –∞–≥–µ–Ω—Ç—ñ–≤
"""

import os
import json
from datetime import datetime
from typing import Dict, List

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
from dotenv import load_dotenv
load_dotenv()

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ LangChain –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate

class SimpleAgent:
    """–ü—Ä–æ—Å—Ç–∏–π AI –∞–≥–µ–Ω—Ç –¥–ª—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è"""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞"""
        # –û—Ç—Ä–∏–º—É—î–º–æ API –∫–ª—é—á
        api_key = os.getenv("OPENAI_API_KEY")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ LLM (–º–æ–∑–æ–∫ –∞–≥–µ–Ω—Ç–∞)
        if api_key:
            self.llm = ChatOpenAI(model="gpt-4", temperature=0.7)
            self.has_ai = True
            print("‚úÖ AI –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
        else:
            self.llm = None
            self.has_ai = False
            print("‚ö†Ô∏è –ü—Ä–∞—Ü—é—é –±–µ–∑ AI (–¥–µ–º–æ —Ä–µ–∂–∏–º)")
    
    def search(self, topic: str) -> str:
        """–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 1: –ü–æ—à—É–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–≤ –±–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –ø–æ—à—É–∫
        # –î–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥
        return f"""
        –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ '{topic}':
        1. AI –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑—É—î –Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        2. 85% —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å AI —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
        3. –ì–æ–ª–æ–≤–Ω—ñ –≤–∏–∫–ª–∏–∫–∏: –µ—Ç–∏–∫–∞, –ø—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å, –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
        """
    
    def analyze(self, text: str) -> Dict:
        """–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 2: –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É"""
        words = len(text.split())
        
        # –ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞—Å—Ç—Ä–æ—é
        positive = text.count("—É—Å–ø—ñ—Ö") + text.count("–ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
        negative = text.count("–ø—Ä–æ–±–ª–µ–º–∞") + text.count("–≤–∏–∫–ª–∏–∫")
        
        sentiment = "–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π" if positive > negative else "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π"
        
        return {
            "—Å–ª—ñ–≤": words,
            "–Ω–∞—Å—Ç—Ä—ñ–π": sentiment,
            "–ø–æ–∑–∏—Ç–∏–≤": positive,
            "–Ω–µ–≥–∞—Ç–∏–≤": negative
        }
    
    def get_ai_insights(self, topic: str, data: str) -> str:
        """–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 3: AI –∞–Ω–∞–ª—ñ–∑ (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π)"""
        if not self.has_ai:
            return "AI –∞–Ω–∞–ª—ñ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–ø–æ—Ç—Ä—ñ–±–µ–Ω API –∫–ª—é—á)"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º–ø—Ç (—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è AI)
        prompt = ChatPromptTemplate.from_messages([
            ("system", "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –∞–Ω–∞–ª—ñ–∑—É. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫."),
            ("human", f"–¢–µ–º–∞: {topic}\n–î–∞–Ω—ñ: {data}\n–©–æ –º–æ–∂–µ—à —Å–∫–∞–∑–∞—Ç–∏?")
        ])
        
        # –ó–∞–ø–∏—Ç—É—î–º–æ AI
        chain = prompt | self.llm
        response = chain.invoke({"topic": topic, "data": data})
        
        return response.content
    
    def research(self, topic: str) -> Dict:
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –ø—Ä–æ–≤–æ–¥–∏–º–æ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è"""
        print(f"\nüîç –î–æ—Å–ª—ñ–¥–∂—É—é: {topic}")
        print("-" * 50)
        
        # –ö—Ä–æ–∫ 1: –ü–æ—à—É–∫
        print("1Ô∏è‚É£ –®—É–∫–∞—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...")
        search_results = self.search(topic)
        
        # –ö—Ä–æ–∫ 2: –ê–Ω–∞–ª—ñ–∑
        print("2Ô∏è‚É£ –ê–Ω–∞–ª—ñ–∑—É—é –¥–∞–Ω—ñ...")
        analysis = self.analyze(search_results)
        
        # –ö—Ä–æ–∫ 3: AI –≤–∏—Å–Ω–æ–≤–∫–∏
        print("3Ô∏è‚É£ –ì–µ–Ω–µ—Ä—É—é –≤–∏—Å–Ω–æ–≤–∫–∏...")
        ai_insights = self.get_ai_insights(topic, search_results)
        
        # –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "—Ç–µ–º–∞": topic,
            "–¥–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M"),
            "–ø–æ—à—É–∫": search_results,
            "–∞–Ω–∞–ª—ñ–∑": analysis,
            "ai_–≤–∏—Å–Ω–æ–≤–∫–∏": ai_insights
        }
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ñ–∞–π–ª
        with open("agent_result.json", "w", encoding="utf-8") as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print("‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ agent_result.json")
        return result

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("=" * 50)
    print("     ü§ñ SIMPLE AI RESEARCH AGENT")
    print("=" * 50)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–≥–µ–Ω—Ç–∞
    agent = SimpleAgent()
    
    # –î–æ—Å–ª—ñ–¥–∂—É—î–º–æ —Ç–µ–º—É
    topic = "–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –≤ –æ—Å–≤—ñ—Ç—ñ 2025"
    result = agent.research(topic)
    
    # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"–ù–∞—Å—Ç—Ä—ñ–π: {result['–∞–Ω–∞–ª—ñ–∑']['–Ω–∞—Å—Ç—Ä—ñ–π']}")
    print(f"–°–ª—ñ–≤ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {result['–∞–Ω–∞–ª—ñ–∑']['—Å–ª—ñ–≤']}")
    print(f"\nüí° AI –≤–∏—Å–Ω–æ–≤–æ–∫: {result['ai_–≤–∏—Å–Ω–æ–≤–∫–∏'][:200]}...")

if __name__ == "__main__":
    main()
